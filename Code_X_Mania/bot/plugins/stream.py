# (c) Code-X-Mania

import asyncio
from Code_X_Mania.bot import StreamBot
from Code_X_Mania.utils.database import Database
from Code_X_Mania.utils.human_readable import humanbytes
from Code_X_Mania.vars import Var
from pyrogram import filters, Client
from pyrogram.errors import FloodWait, UserNotParticipant
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
db = Database(Var.DATABASE_URL, Var.SESSION_NAME)
from pyshorteners import Shortener



def get_shortlink(url):
   shortlink = False 
   try:
      shortlink = Shortener().dagd.short(url)
   except Exception as err:
       print(err)
       pass
   return shortlink
@StreamBot.on_message(filters.private & (filters.document | filters.video | filters.audio) & ~filters.edited, group=4)
async def private_receive_handler(c: Client, m: Message):
    if not await db.is_user_exist(m.from_user.id):
        await db.add_user(m.from_user.id)
        await c.send_message(
            Var.BIN_CHANNEL,
            f"N·¥á·¥° Us·¥á Ä J·¥è…™…¥·¥á·¥Ö : \n\n N·¥Ä·¥ç·¥á : [{m.from_user.first_name}](tg://user?id={m.from_user.id}) S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Y·¥è·¥ú Ä B·¥è·¥õ !!"
        )
    if Var.UPDATES_CHANNEL != "None":
        try:
            user = await c.get_chat_member(Var.UPDATES_CHANNEL, m.chat.id)
            if user.status == "kicked":
                await c.send_message(
                    chat_id=m.chat.id,
                    text="__S·¥è Ä Ä è S…™ Ä, Y·¥è·¥ú ·¥Ä Ä·¥á B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á.__",
                    parse_mode="markdown",
                    disable_web_page_preview=True
                )
                return
        except UserNotParticipant:
            await c.send_message(
                chat_id=m.chat.id,
                text="""<i>J·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥úÍú±·¥á ·¥ç·¥á üîê</i>""",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("J·¥è…™…¥ …¥·¥è·¥° üîì", url=f"https://t.me/{Var.UPDATES_CHANNEL}")
                        ]
                    ]
                ),
                parse_mode="HTML"
            )
            return
        except Exception:
            await c.send_message(
                chat_id=m.chat.id,
                text="**S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ W Ä·¥è…¥…¢. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è  ô·¥èss** ",
                parse_mode="markdown",
                disable_web_page_preview=True)
            return
    try:
        log_msg = await m.forward(chat_id=Var.BIN_CHANNEL)
         #--- watch
        stream_link2 = Var.URL + 'watch/' + str(log_msg.message_id)
        shortlink = get_shortlink(stream_link2) 
        if shortlink:
            stream_link = shortlink
            #---- download
        online_link2 = Var.URL + 'download/'+ str(log_msg.message_id) 
        shortlinka = get_shortlink(online_link2)
        if shortlinka:
            online_link = shortlinka
        
        file_size = None
        if m.video:
            file_size = f"{humanbytes(m.video.file_size)}"
        elif m.document:
            file_size = f"{humanbytes(m.document.file_size)}"
        elif m.audio:
            file_size = f"{humanbytes(m.audio.file_size)}"

        file_name = None
        if m.video:
            file_name = f"{m.video.file_name}"
        elif m.document:
            file_name = f"{m.document.file_name}"
        elif m.audio:
            file_name = f"{m.audio.file_name}"

        msg_text ="""
<b>üìÇ F…™ ü·¥á …¥·¥Ä·¥ç·¥á :</b> <i>{}</i>

<b>üì¶ F…™ ü·¥á Íú±…™·¥¢·¥á :</b> <i>{}</i>

<b>üì• D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö :</b> <i>{}</i>

<b> üñ• WATCH    :</b> <i>{}</i>

<b>üö∏ N·¥è·¥õ·¥á : LINK WON'T EXPIRE  </b>

<b>·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú‚ù§Ô∏è ô è @MyTestBotZ</b>

"""

        await log_msg.reply_text(text=f"**R·¥áQ·¥ú·¥áÍú±·¥õ·¥á·¥Ö  ô è :** [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n**UÍú±·¥á Ä …™·¥Ö :** `{m.from_user.id}`\n**D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã :** {online_link2}\n\n**·¥°·¥Ä·¥õ·¥Ñ ú :** {stream_link2}", disable_web_page_preview=True, parse_mode="Markdown", quote=True)
        await m.reply_text(
            text=msg_text.format(file_name, file_size, online_link2, stream_link2),
            parse_mode="HTML", 
            quote=True,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Share & Support us", url=SHARE)],
                                               [InlineKeyboardButton("üñ•STREAM", url=stream_link2), #Stream Link
                                                InlineKeyboardButton('D·¥è·¥°…¥ ü·¥è·¥Ä·¥Öüì•', url=online_link2)]]) #Download Link
        )
    except FloodWait as e:
        print(f"Sleeping for {str(e.x)}s")
        await asyncio.sleep(e.x)
        await c.send_message(chat_id=Var.BIN_CHANNEL, text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(e.x)}s from [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n\n**ùöÑùöúùöéùöõ ùô∏ùô≥ :** `{str(m.from_user.id)}`", disable_web_page_preview=True, parse_mode="Markdown")

SHARE = "http://t.me/share/url?url=Hey%20There%E2%9D%A4%EF%B8%8F%2C%0A%20%0A%20I%20Found%20A%20Really%20Awesome%20Bot%20%20For%20Generate%20Direct%20URL%20Link%20of%20any%20Telegram%20Medias.%0A%20Hope%20This%20Bot%20Helps%20You%20Too.%E2%9D%A4%EF%B8%8F%E2%9D%A4%EF%B8%8F%E2%9D%A4%EF%B8%8F%0A%20%0A%20Bot%20Link%20%3A-%20%40TGinstantLinkBot"         

@StreamBot.on_message(filters.channel & (filters.document | filters.video) & ~filters.edited, group=-1)
async def channel_receive_handler(bot, broadcast):
    if int(broadcast.chat.id) in Var.BANNED_CHANNELS:
        await bot.leave_chat(broadcast.chat.id)
        return
    try:
        log_msg = await broadcast.forward(chat_id=Var.BIN_CHANNEL)
        stream_link = Var.URL + 'watch/' + str(log_msg.message_id) 
        online_link = Var.URL + 'download/' + str(log_msg.message_id) 
        await log_msg.reply_text(
            text=f"**C ú·¥Ä…¥…¥·¥á ü N·¥Ä·¥ç·¥á:** `{broadcast.chat.title}`\n**#Channel ID:** `{broadcast.chat.id}`\n**·¥°·¥Ä·¥õ·¥Ñ ú:** {stream_link}\n\n**·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö:** {online_link}",
            quote=True,
            parse_mode="Markdown"
        )
        await bot.edit_message_reply_markup(
            chat_id=broadcast.chat.id,
            message_id=broadcast.message_id,
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥†…™·¥Ä  ô·¥è·¥õ", url=f"https://t.me/TGinstantLinkBot?start=MyTestBotZ_{str(log_msg.message_id)}")],
                    [InlineKeyboardButton("üñ•STREAM ", url=stream_link),
                     InlineKeyboardButton('D·¥è·¥°…¥ ü·¥è·¥Ä·¥Öüì•', url=online_link)]                   
                ]
            )
        )
    except FloodWait as w:
        print(f"Sleeping for {str(w.x)}s")
        await asyncio.sleep(w.x)
        await bot.send_message(chat_id=Var.BIN_CHANNEL,
                             text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(w.x)}s from {broadcast.chat.title}\n\n**C ú·¥Ä…¥…¥·¥á ü ID:** `{str(broadcast.chat.id)}`",
                             disable_web_page_preview=True, parse_mode="Markdown")
    except Exception as e:
        await bot.send_message(chat_id=Var.BIN_CHANNEL, text=f"**#·¥á Ä Ä·¥è Ä_·¥õ Ä·¥Ä·¥Ñ·¥á ô·¥Ä·¥Ñ·¥ã:** `{e}`", disable_web_page_preview=True, parse_mode="Markdown")
        print(f"C·¥Ä…¥'·¥õ E·¥Ö…™·¥õ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á!\nE Ä Ä·¥è Ä:  **Give me edit permission in updates and bin Chanell{e}**")
